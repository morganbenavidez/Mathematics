# -*- coding: utf-8 -*-
"""dotproduct_of_two_n-vectors.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15XE9Rv3C_uRLtZYI10-rEvzlOVVErrHg
"""

# Inner or Dot Product of Two n-vectors

# Vector - an array of numbers that is arranged in order

# x^T = [x1, x2, ... xn]1 x n,  T is the Transpose, n is columns

#p = [p1,
#     p2,
#    .
#    .
#    .
#    pn]n x 1, n is rows

# We can only multiply these two if n columns match n rows

# x^T(p) = x1p1 + x2p2 + ... + xnpn

import numpy as np

x = np.array([-10, 0, 10])

p = np.array([0.1, 0.4, 0.5])

np.inner(x, p)  # x^T(p)
# $$$ np.inner(x, p) == x @ p

# x @ p

#np.inner(p, x)  # p^T(x), same as above, but if you want to put p first, it must include the transpose
# numpy automatically does this transposition for you


ones = np.array([1,1,1])
np.inner(ones, p)

# shape is the dimension
p.shape

# $$$ mean of dot product
np.inner(ones,p) / p.shape[0]

# Sum of the squares

np.inner(x, x)

x @ x